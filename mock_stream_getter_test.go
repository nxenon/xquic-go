// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go (interfaces: StreamGetter)

// Package quic is a generated GoMock package.
package quic

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
)

// MockStreamGetter is a mock of StreamGetter interface
type MockStreamGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStreamGetterMockRecorder
}

// MockStreamGetterMockRecorder is the mock recorder for MockStreamGetter
type MockStreamGetterMockRecorder struct {
	mock *MockStreamGetter
}

// NewMockStreamGetter creates a new mock instance
func NewMockStreamGetter(ctrl *gomock.Controller) *MockStreamGetter {
	mock := &MockStreamGetter{ctrl: ctrl}
	mock.recorder = &MockStreamGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamGetter) EXPECT() *MockStreamGetterMockRecorder {
	return m.recorder
}

// GetOrOpenStream mocks base method
func (m *MockStreamGetter) GetOrOpenStream(arg0 protocol.StreamID) (streamI, error) {
	ret := m.ctrl.Call(m, "GetOrOpenStream", arg0)
	ret0, _ := ret[0].(streamI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrOpenStream indicates an expected call of GetOrOpenStream
func (mr *MockStreamGetterMockRecorder) GetOrOpenStream(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrOpenStream", reflect.TypeOf((*MockStreamGetter)(nil).GetOrOpenStream), arg0)
}
