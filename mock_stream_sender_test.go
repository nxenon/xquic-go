// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go (interfaces: StreamSender)

package quic

import (
	gomock "github.com/golang/mock/gomock"
	wire "github.com/lucas-clemente/quic-go/internal/wire"
	reflect "reflect"
)

// MockStreamSender is a mock of StreamSender interface
type MockStreamSender struct {
	ctrl     *gomock.Controller
	recorder *MockStreamSenderMockRecorder
}

// MockStreamSenderMockRecorder is the mock recorder for MockStreamSender
type MockStreamSenderMockRecorder struct {
	mock *MockStreamSender
}

// NewMockStreamSender creates a new mock instance
func NewMockStreamSender(ctrl *gomock.Controller) *MockStreamSender {
	mock := &MockStreamSender{ctrl: ctrl}
	mock.recorder = &MockStreamSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStreamSender) EXPECT() *MockStreamSenderMockRecorder {
	return _m.recorder
}

// queueControlFrame mocks base method
func (_m *MockStreamSender) queueControlFrame(_param0 wire.Frame) {
	_m.ctrl.Call(_m, "queueControlFrame", _param0)
}

// queueControlFrame indicates an expected call of queueControlFrame
func (_mr *MockStreamSenderMockRecorder) queueControlFrame(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "queueControlFrame", reflect.TypeOf((*MockStreamSender)(nil).queueControlFrame), arg0)
}

// scheduleSending mocks base method
func (_m *MockStreamSender) scheduleSending() {
	_m.ctrl.Call(_m, "scheduleSending")
}

// scheduleSending indicates an expected call of scheduleSending
func (_mr *MockStreamSenderMockRecorder) scheduleSending() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "scheduleSending", reflect.TypeOf((*MockStreamSender)(nil).scheduleSending))
}
