// Code generated by MockGen. DO NOT EDIT.
// Source: ../flowcontrol/interface.go

// Package mocks_fc is a generated GoMock package.
package mocks_fc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/lucas-clemente/quic-go/internal/flowcontrol"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
)

// MockFlowControlManager is a mock of FlowControlManager interface
type MockFlowControlManager struct {
	ctrl     *gomock.Controller
	recorder *MockFlowControlManagerMockRecorder
}

// MockFlowControlManagerMockRecorder is the mock recorder for MockFlowControlManager
type MockFlowControlManagerMockRecorder struct {
	mock *MockFlowControlManager
}

// NewMockFlowControlManager creates a new mock instance
func NewMockFlowControlManager(ctrl *gomock.Controller) *MockFlowControlManager {
	mock := &MockFlowControlManager{ctrl: ctrl}
	mock.recorder = &MockFlowControlManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlowControlManager) EXPECT() *MockFlowControlManagerMockRecorder {
	return m.recorder
}

// NewStream mocks base method
func (m *MockFlowControlManager) NewStream(streamID protocol.StreamID, contributesToConnectionFlow bool) {
	m.ctrl.Call(m, "NewStream", streamID, contributesToConnectionFlow)
}

// NewStream indicates an expected call of NewStream
func (mr *MockFlowControlManagerMockRecorder) NewStream(streamID, contributesToConnectionFlow interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockFlowControlManager)(nil).NewStream), streamID, contributesToConnectionFlow)
}

// RemoveStream mocks base method
func (m *MockFlowControlManager) RemoveStream(streamID protocol.StreamID) {
	m.ctrl.Call(m, "RemoveStream", streamID)
}

// RemoveStream indicates an expected call of RemoveStream
func (mr *MockFlowControlManagerMockRecorder) RemoveStream(streamID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStream", reflect.TypeOf((*MockFlowControlManager)(nil).RemoveStream), streamID)
}

// ResetStream mocks base method
func (m *MockFlowControlManager) ResetStream(streamID protocol.StreamID, byteOffset protocol.ByteCount) error {
	ret := m.ctrl.Call(m, "ResetStream", streamID, byteOffset)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetStream indicates an expected call of ResetStream
func (mr *MockFlowControlManagerMockRecorder) ResetStream(streamID, byteOffset interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetStream", reflect.TypeOf((*MockFlowControlManager)(nil).ResetStream), streamID, byteOffset)
}

// UpdateHighestReceived mocks base method
func (m *MockFlowControlManager) UpdateHighestReceived(streamID protocol.StreamID, byteOffset protocol.ByteCount) error {
	ret := m.ctrl.Call(m, "UpdateHighestReceived", streamID, byteOffset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHighestReceived indicates an expected call of UpdateHighestReceived
func (mr *MockFlowControlManagerMockRecorder) UpdateHighestReceived(streamID, byteOffset interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHighestReceived", reflect.TypeOf((*MockFlowControlManager)(nil).UpdateHighestReceived), streamID, byteOffset)
}

// AddBytesRead mocks base method
func (m *MockFlowControlManager) AddBytesRead(streamID protocol.StreamID, n protocol.ByteCount) error {
	ret := m.ctrl.Call(m, "AddBytesRead", streamID, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBytesRead indicates an expected call of AddBytesRead
func (mr *MockFlowControlManagerMockRecorder) AddBytesRead(streamID, n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBytesRead", reflect.TypeOf((*MockFlowControlManager)(nil).AddBytesRead), streamID, n)
}

// GetWindowUpdates mocks base method
func (m *MockFlowControlManager) GetWindowUpdates() []flowcontrol.WindowUpdate {
	ret := m.ctrl.Call(m, "GetWindowUpdates")
	ret0, _ := ret[0].([]flowcontrol.WindowUpdate)
	return ret0
}

// GetWindowUpdates indicates an expected call of GetWindowUpdates
func (mr *MockFlowControlManagerMockRecorder) GetWindowUpdates() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowUpdates", reflect.TypeOf((*MockFlowControlManager)(nil).GetWindowUpdates))
}

// GetReceiveWindow mocks base method
func (m *MockFlowControlManager) GetReceiveWindow(streamID protocol.StreamID) (protocol.ByteCount, error) {
	ret := m.ctrl.Call(m, "GetReceiveWindow", streamID)
	ret0, _ := ret[0].(protocol.ByteCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiveWindow indicates an expected call of GetReceiveWindow
func (mr *MockFlowControlManagerMockRecorder) GetReceiveWindow(streamID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveWindow", reflect.TypeOf((*MockFlowControlManager)(nil).GetReceiveWindow), streamID)
}

// AddBytesSent mocks base method
func (m *MockFlowControlManager) AddBytesSent(streamID protocol.StreamID, n protocol.ByteCount) error {
	ret := m.ctrl.Call(m, "AddBytesSent", streamID, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBytesSent indicates an expected call of AddBytesSent
func (mr *MockFlowControlManagerMockRecorder) AddBytesSent(streamID, n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBytesSent", reflect.TypeOf((*MockFlowControlManager)(nil).AddBytesSent), streamID, n)
}

// SendWindowSize mocks base method
func (m *MockFlowControlManager) SendWindowSize(streamID protocol.StreamID) (protocol.ByteCount, error) {
	ret := m.ctrl.Call(m, "SendWindowSize", streamID)
	ret0, _ := ret[0].(protocol.ByteCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWindowSize indicates an expected call of SendWindowSize
func (mr *MockFlowControlManagerMockRecorder) SendWindowSize(streamID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWindowSize", reflect.TypeOf((*MockFlowControlManager)(nil).SendWindowSize), streamID)
}

// RemainingConnectionWindowSize mocks base method
func (m *MockFlowControlManager) RemainingConnectionWindowSize() protocol.ByteCount {
	ret := m.ctrl.Call(m, "RemainingConnectionWindowSize")
	ret0, _ := ret[0].(protocol.ByteCount)
	return ret0
}

// RemainingConnectionWindowSize indicates an expected call of RemainingConnectionWindowSize
func (mr *MockFlowControlManagerMockRecorder) RemainingConnectionWindowSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemainingConnectionWindowSize", reflect.TypeOf((*MockFlowControlManager)(nil).RemainingConnectionWindowSize))
}

// UpdateWindow mocks base method
func (m *MockFlowControlManager) UpdateWindow(streamID protocol.StreamID, offset protocol.ByteCount) (bool, error) {
	ret := m.ctrl.Call(m, "UpdateWindow", streamID, offset)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWindow indicates an expected call of UpdateWindow
func (mr *MockFlowControlManagerMockRecorder) UpdateWindow(streamID, offset interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWindow", reflect.TypeOf((*MockFlowControlManager)(nil).UpdateWindow), streamID, offset)
}
