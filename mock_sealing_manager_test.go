// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go (interfaces: SealingManagerLegacy)

// Package quic is a generated GoMock package.
package quic

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	handshake "github.com/lucas-clemente/quic-go/internal/handshake"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
)

// MockSealingManagerLegacy is a mock of SealingManagerLegacy interface
type MockSealingManagerLegacy struct {
	ctrl     *gomock.Controller
	recorder *MockSealingManagerLegacyMockRecorder
}

// MockSealingManagerLegacyMockRecorder is the mock recorder for MockSealingManagerLegacy
type MockSealingManagerLegacyMockRecorder struct {
	mock *MockSealingManagerLegacy
}

// NewMockSealingManagerLegacy creates a new mock instance
func NewMockSealingManagerLegacy(ctrl *gomock.Controller) *MockSealingManagerLegacy {
	mock := &MockSealingManagerLegacy{ctrl: ctrl}
	mock.recorder = &MockSealingManagerLegacyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSealingManagerLegacy) EXPECT() *MockSealingManagerLegacyMockRecorder {
	return m.recorder
}

// GetSealer mocks base method
func (m *MockSealingManagerLegacy) GetSealer() (protocol.EncryptionLevel, handshake.Sealer) {
	ret := m.ctrl.Call(m, "GetSealer")
	ret0, _ := ret[0].(protocol.EncryptionLevel)
	ret1, _ := ret[1].(handshake.Sealer)
	return ret0, ret1
}

// GetSealer indicates an expected call of GetSealer
func (mr *MockSealingManagerLegacyMockRecorder) GetSealer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSealer", reflect.TypeOf((*MockSealingManagerLegacy)(nil).GetSealer))
}

// GetSealerForCryptoStream mocks base method
func (m *MockSealingManagerLegacy) GetSealerForCryptoStream() (protocol.EncryptionLevel, handshake.Sealer) {
	ret := m.ctrl.Call(m, "GetSealerForCryptoStream")
	ret0, _ := ret[0].(protocol.EncryptionLevel)
	ret1, _ := ret[1].(handshake.Sealer)
	return ret0, ret1
}

// GetSealerForCryptoStream indicates an expected call of GetSealerForCryptoStream
func (mr *MockSealingManagerLegacyMockRecorder) GetSealerForCryptoStream() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSealerForCryptoStream", reflect.TypeOf((*MockSealingManagerLegacy)(nil).GetSealerForCryptoStream))
}

// GetSealerWithEncryptionLevel mocks base method
func (m *MockSealingManagerLegacy) GetSealerWithEncryptionLevel(arg0 protocol.EncryptionLevel) (handshake.Sealer, error) {
	ret := m.ctrl.Call(m, "GetSealerWithEncryptionLevel", arg0)
	ret0, _ := ret[0].(handshake.Sealer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSealerWithEncryptionLevel indicates an expected call of GetSealerWithEncryptionLevel
func (mr *MockSealingManagerLegacyMockRecorder) GetSealerWithEncryptionLevel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSealerWithEncryptionLevel", reflect.TypeOf((*MockSealingManagerLegacy)(nil).GetSealerWithEncryptionLevel), arg0)
}
